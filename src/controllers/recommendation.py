import json
from src.models.question_bank import QuestionBank;
from src.models.test_result import TestResult;
from src.models.test_result_detail import TestResultDetail;
from src.models.user import User;
from src.utils.response import CustomResponse

from sqlalchemy import create_engine, text

from src.utils.db import db

# import question characteristic 
from src.pipeline.extract_features import extract_features

# import Orange3
import Orange

# import render template
from flask import render_template, jsonify, request

# import model
from mlxtend.frequent_patterns import fpgrowth

import pandas as pd

class Recommendation():
    def __init__(self, user):
        self.user = user
    def HelloWord():
        return "hello word"
    
    @staticmethod
    def dataset_discretization(dataset):
        # use orange3 for discretization
        discretizer = Orange.preprocess.Discretize()
        disc_data = dataset
        return disc_data
    
    # get recommendation
    @staticmethod
    def recommendation():
       payload = request.get_json()

       data = User.get_data_for_recommendation(payload['userIds'])

       print("ini datanya ", data)

       # feature extraction 
      #  pipeline = extract_features(rows[0].question, [2,5,6,13])

       # diskritisasi dataset 
    #    diskrit_data = Recommendation.dataset_discretization(pipeline.pipeline())

       # load dataset 
       data = pd.read_csv('data/smartengtest-dataset.csv')

       # modelling dataset 
       # Apply FP-growth to find frequent itemsets
       frequent_itemsets = fpgrowth(data, min_support=0.5, use_colnames=True)

       maxItem =  len(frequent_itemsets) if len(frequent_itemsets) < 3 else 3 
       detections = []

       for _, item in frequent_itemsets.iterrows():
              detect = {}
              if len(detections) < maxItem:
                detect["support"] = item.support
                detect["item"] = json.dumps({'items': [str(it) for it in item['itemsets']]}) 
                detections.append(detect)
              else:
                break
       
       print(detections)
       res = {
            "name": "arfiansyah",
            "detections": detections,
            "text": "generated by AI"
        }
       return CustomResponse.success(res)
    
    def getUser(self):
        return self.user